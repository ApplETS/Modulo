name: Main Workflow - Dart package

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '.metadata'
      - '.github/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '*.md'
      - '.metadata'
  workflow_dispatch:

env:
  min_coverage: 50
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  delete_bot_comments:
    name: Delete bot comments on PR.
    runs-on: ubuntu-latest
    steps:
      - uses: izhangzhihao/delete-comment@master
        if: ${{ github.event_name == 'pull_request' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_user_name: github-actions[bot]
          issue_number: ${{ github.event.number }}
  tag_validation:
    name: Tag validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.split.outputs._0 }}
    needs:
      - delete_bot_comments
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v2

      - name: Get version number from the pubspec.yaml
        id: pubspecVersion
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: pubspec.yaml
          version: version
      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.pubspecVersion.outputs.version }}
          seperator: '+'

      - name: Validate that version doesn't exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with:
          tag: ${{ steps.split.outputs._0 }}

      - name: 💬 Post comment on PR and fail.
        if: ${{ steps.checkTag.outputs.exists == 'true' && github.event_name == 'pull_request' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} -b '${{ steps.split.outputs._0 }} already exists, please update the pubspec version.'
          exit 1

  build:
    name: Build and test
    runs-on: ubuntu-latest
    needs:
      - delete_bot_comments
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v2

      - name: 🎯 Setup Dart
        uses: dart-lang/setup-dart@v1
        
      - name: 🪤 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.0.x'
          channel: 'stable'
          cache: true
      - run: flutter doctor

      - name: 📦 Install Dependencies
        run: flutter pub get

      - name: ✨ Formatting lib and test directories
        run: flutter format lib test

      - name: ✉️ Commit formatted files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: "*.dart"
          commit_user_name: Github Actions Bot
          commit_message: "[BOT] Applying dart format."
          add_options: '-u'

      - name: 🕵️ Analyze
        run: flutter analyze --fatal-warnings lib test

      - name: 🧪 Run Tests
        run: |
          pub global activate test_coverage
          export PATH=$PATH:$HOME/.pub-cache/bin
          test_coverage

      - name: 💬 Comment coverage details on the PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: romeovs/lcov-reporter-action@v0.2.21
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

      - name: 📊 Check Code Coverage
        id: check_coverage
        if: ${{ github.event_name == 'pull_request' }}
        uses: VeryGoodOpenSource/very_good_coverage@v1
        with:
          path: ./coverage/lcov.info
          min_coverage: ${{ env.min_coverage }}

      - name: 💬 Comment coverage too low
        if: ${{ failure() && steps.check_coverage.outcome == 'failure' && github.event_name == 'pull_request' }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} -b 'Coverage too low, please improve the test to ${{ env.min_coverage }}% at least.'

      - name: ✉️ Commit coverage badge
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: "coverage_badge.svg"
          commit_user_name: Github Actions Bot
          commit_message: "[BOT] Update coverage badge."
          add_options: '-u'
  pre_release:
    name: Pre-release the package on Github.
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main') }}
    needs:
      - tag_validation
      - build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create pre-release
        run: |
          gh release create ${{ needs.tag_validation.outputs.version }} --title v${{ needs.tag_validation.outputs.version }} -R '${{ github.repository }}' --prerelease --generate-notes
